# Generated by Django 4.2.24 on 2025-09-06 20:48

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Adresse email unique pour l'authentification",
                        max_length=254,
                        unique=True,
                        verbose_name="Adresse email",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Numéro de téléphone pour SMS 2FA",
                        max_length=20,
                        verbose_name="Numéro de téléphone",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Photo de profil de l'utilisateur",
                        null=True,
                        upload_to="avatars/",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Indique si l'email de l'utilisateur a été vérifié",
                        verbose_name="Email vérifié",
                    ),
                ),
                (
                    "two_factor_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Indique si l'authentification à deux facteurs est activée",
                        verbose_name="2FA activé",
                    ),
                ),
                (
                    "backup_codes",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Codes de secours pour l'authentification 2FA",
                        verbose_name="Codes de secours",
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Adresse IP de la dernière connexion",
                        null=True,
                        verbose_name="Dernière IP de connexion",
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Nombre de tentatives de connexion échouées",
                        verbose_name="Tentatives de connexion échouées",
                    ),
                ),
                (
                    "locked_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date/heure jusqu'à laquelle le compte est verrouillé",
                        null=True,
                        verbose_name="Verrouillé jusqu'à",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date et heure de création du compte",
                        verbose_name="Date de création",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date et heure de dernière modification",
                        verbose_name="Date de modification",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date et heure de la dernière activité",
                        null=True,
                        verbose_name="Dernière activité",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("fr", "Français"),
                            ("en", "English"),
                            ("es", "Español"),
                            ("de", "Deutsch"),
                        ],
                        default="fr",
                        help_text="Langue préférée de l'utilisateur",
                        max_length=5,
                        verbose_name="Langue",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC",
                        help_text="Fuseau horaire préféré de l'utilisateur",
                        max_length=50,
                        verbose_name="Fuseau horaire",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Recevoir les notifications par email",
                        verbose_name="Notifications email",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Utilisateur",
                "verbose_name_plural": "Utilisateurs",
                "db_table": "auth_user",
                "ordering": ["-created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TwoFactorAuth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "secret_key",
                    models.CharField(
                        help_text="Clé secrète pour générer les codes TOTP",
                        max_length=32,
                        verbose_name="Clé secrète",
                    ),
                ),
                (
                    "backup_codes",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Codes de secours pour récupérer l'accès",
                        verbose_name="Codes de secours",
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Indique si la 2FA est activée pour cet utilisateur",
                        verbose_name="Activé",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date et heure de création de la configuration 2FA",
                        verbose_name="Date de création",
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date et heure de dernière utilisation de la 2FA",
                        null=True,
                        verbose_name="Dernière utilisation",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Utilisateur associé à cette configuration 2FA",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="two_factor_auth",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Authentification 2FA",
                "verbose_name_plural": "Authentifications 2FA",
                "db_table": "auth_two_factor_auth",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        help_text="Clé unique de la session Django",
                        max_length=40,
                        unique=True,
                        verbose_name="Clé de session",
                    ),
                ),
                (
                    "device_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Informations sur l'appareil (navigateur, OS, etc.)",
                        verbose_name="Informations du device",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="Adresse IP de la connexion",
                        verbose_name="Adresse IP",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        help_text="User Agent du navigateur/appareil",
                        verbose_name="User Agent",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indique si la session est active",
                        verbose_name="Session active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date et heure de création de la session",
                        verbose_name="Date de création",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date et heure de dernière activité sur cette session",
                        verbose_name="Dernière activité",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="Date et heure d'expiration de la session",
                        verbose_name="Expire le",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Utilisateur propriétaire de cette session",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Session utilisateur",
                "verbose_name_plural": "Sessions utilisateur",
                "db_table": "auth_user_session",
                "ordering": ["-last_activity"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="auth_user_s_user_id_be2038_idx",
                    ),
                    models.Index(
                        fields=["session_key"], name="auth_user_s_session_939fd1_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="auth_user_s_expires_c416bc_idx"
                    ),
                ],
            },
        ),
    ]
