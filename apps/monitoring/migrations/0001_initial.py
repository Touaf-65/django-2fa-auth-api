# Generated by Django 4.2.24 on 2025-09-08 22:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("firing", "Firing"),
                            ("resolved", "Resolved"),
                            ("acknowledged", "Acknowledged"),
                            ("silenced", "Silenced"),
                        ],
                        default="firing",
                        max_length=15,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("message", models.TextField()),
                ("value", models.FloatField()),
                ("threshold", models.FloatField()),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("labels", models.JSONField(blank=True, default=dict)),
                ("annotations", models.JSONField(blank=True, default=dict)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_alert",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("shared", "Shared"),
                            ("public", "Public"),
                        ],
                        default="private",
                        max_length=10,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "refresh_interval",
                    models.PositiveIntegerField(
                        default=30, help_text="Refresh interval in seconds"
                    ),
                ),
                ("layout_config", models.JSONField(blank=True, default=dict)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_dashboard",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="HealthCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("display_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "check_type",
                    models.CharField(
                        choices=[
                            ("database", "Database"),
                            ("cache", "Cache"),
                            ("storage", "Storage"),
                            ("external_api", "External API"),
                            ("queue", "Queue"),
                            ("custom", "Custom"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "check_interval",
                    models.PositiveIntegerField(
                        default=60, help_text="Interval in seconds"
                    ),
                ),
                (
                    "timeout",
                    models.PositiveIntegerField(
                        default=30, help_text="Timeout in seconds"
                    ),
                ),
                ("check_config", models.JSONField(blank=True, default=dict)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "monitoring_health_check",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Metric",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("display_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("counter", "Counter"),
                            ("gauge", "Gauge"),
                            ("histogram", "Histogram"),
                            ("summary", "Summary"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("bytes", "Bytes"),
                            ("seconds", "Seconds"),
                            ("milliseconds", "Milliseconds"),
                            ("count", "Count"),
                            ("percent", "Percent"),
                            ("requests", "Requests"),
                            ("users", "Users"),
                            ("errors", "Errors"),
                            ("custom", "Custom"),
                        ],
                        default="count",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_public", models.BooleanField(default=False)),
                ("retention_days", models.PositiveIntegerField(default=30)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("warning_threshold", models.FloatField(blank=True, null=True)),
                ("critical_threshold", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "monitoring_metric",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PerformanceMetric",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("display_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("response_time", "Response Time"),
                            ("throughput", "Throughput"),
                            ("error_rate", "Error Rate"),
                            ("cpu_usage", "CPU Usage"),
                            ("memory_usage", "Memory Usage"),
                            ("disk_usage", "Disk Usage"),
                            ("network_io", "Network I/O"),
                            ("database_query", "Database Query"),
                            ("cache_hit_rate", "Cache Hit Rate"),
                            ("custom", "Custom"),
                        ],
                        max_length=30,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "collection_interval",
                    models.PositiveIntegerField(
                        default=60, help_text="Interval in seconds"
                    ),
                ),
                ("warning_threshold", models.FloatField(blank=True, null=True)),
                ("critical_threshold", models.FloatField(blank=True, null=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "monitoring_performance_metric",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SystemHealth",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy"),
                            ("degraded", "Degraded"),
                            ("unhealthy", "Unhealthy"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                (
                    "overall_score",
                    models.FloatField(default=0.0, help_text="Score de 0 à 100"),
                ),
                (
                    "database_status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy"),
                            ("degraded", "Degraded"),
                            ("unhealthy", "Unhealthy"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                (
                    "cache_status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy"),
                            ("degraded", "Degraded"),
                            ("unhealthy", "Unhealthy"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                (
                    "storage_status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy"),
                            ("degraded", "Degraded"),
                            ("unhealthy", "Unhealthy"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                (
                    "external_services_status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy"),
                            ("degraded", "Degraded"),
                            ("unhealthy", "Unhealthy"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                ("cpu_usage", models.FloatField(blank=True, null=True)),
                ("memory_usage", models.FloatField(blank=True, null=True)),
                ("disk_usage", models.FloatField(blank=True, null=True)),
                ("network_latency", models.FloatField(blank=True, null=True)),
                ("issues", models.JSONField(blank=True, default=list)),
                ("recommendations", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "monitoring_system_health",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PerformanceReport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("custom", "Custom"),
                        ],
                        max_length=10,
                    ),
                ),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("summary", models.JSONField(blank=True, default=dict)),
                ("details", models.JSONField(blank=True, default=dict)),
                ("is_generated", models.BooleanField(default=False)),
                ("generated_at", models.DateTimeField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "generated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "metrics",
                    models.ManyToManyField(
                        related_name="reports", to="monitoring.performancemetric"
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_performance_report",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MetricValue",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("value", models.FloatField()),
                ("timestamp", models.DateTimeField(db_index=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("request_id", models.CharField(blank=True, max_length=100)),
                ("labels", models.JSONField(blank=True, default=dict)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="monitoring.metric",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_metric_value",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="LogEntry",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("DEBUG", "Debug"),
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        db_index=True,
                        max_length=10,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("api", "API"),
                            ("auth", "Authentication"),
                            ("user", "User"),
                            ("admin", "Admin"),
                            ("security", "Security"),
                            ("system", "System"),
                            ("database", "Database"),
                            ("external", "External Service"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("message", models.TextField()),
                (
                    "session_id",
                    models.CharField(blank=True, db_index=True, max_length=100),
                ),
                (
                    "request_id",
                    models.CharField(blank=True, db_index=True, max_length=100),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "app_name",
                    models.CharField(blank=True, db_index=True, max_length=50),
                ),
                ("module_name", models.CharField(blank=True, max_length=100)),
                ("function_name", models.CharField(blank=True, max_length=100)),
                ("line_number", models.PositiveIntegerField(blank=True, null=True)),
                ("method", models.CharField(blank=True, max_length=10)),
                ("path", models.CharField(blank=True, max_length=500)),
                ("status_code", models.PositiveIntegerField(blank=True, null=True)),
                ("response_time", models.FloatField(blank=True, null=True)),
                ("exception_type", models.CharField(blank=True, max_length=100)),
                ("exception_message", models.TextField(blank=True)),
                ("stack_trace", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="monitoring_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_log_entry",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="HealthCheckResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                            ("warn", "Warning"),
                            ("unknown", "Unknown"),
                        ],
                        max_length=10,
                    ),
                ),
                ("message", models.TextField(blank=True)),
                ("response_time", models.FloatField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "health_check",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="monitoring.healthcheck",
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_health_check_result",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardWidget",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "widget_type",
                    models.CharField(
                        choices=[
                            ("metric", "Metric"),
                            ("chart", "Chart"),
                            ("table", "Table"),
                            ("alert", "Alert"),
                            ("log", "Log"),
                            ("health", "Health Check"),
                            ("custom", "Custom"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("config", models.JSONField(blank=True, default=dict)),
                ("position", models.PositiveIntegerField(default=0)),
                ("size", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "dashboard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="widgets",
                        to="monitoring.dashboard",
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_dashboard_widget",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="AlertRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "condition",
                    models.CharField(
                        choices=[
                            ("gt", "Greater Than"),
                            ("gte", "Greater Than or Equal"),
                            ("lt", "Less Than"),
                            ("lte", "Less Than or Equal"),
                            ("eq", "Equal"),
                            ("neq", "Not Equal"),
                        ],
                        max_length=20,
                    ),
                ),
                ("threshold", models.FloatField()),
                (
                    "duration",
                    models.PositiveIntegerField(
                        default=0, help_text="Duration in seconds"
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("testing", "Testing"),
                        ],
                        default="active",
                        max_length=10,
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                ("notification_channels", models.JSONField(blank=True, default=list)),
                ("notification_template", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="monitoring.metric",
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_alert_rule",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AlertNotification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "channel",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("webhook", "Webhook"),
                            ("slack", "Slack"),
                            ("teams", "Microsoft Teams"),
                            ("discord", "Discord"),
                        ],
                        max_length=20,
                    ),
                ),
                ("recipient", models.CharField(max_length=500)),
                ("subject", models.CharField(blank=True, max_length=200)),
                ("message", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("delivered", "Delivered"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("error_message", models.TextField(blank=True)),
                (
                    "alert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="monitoring.alert",
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_alert_notification",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="alert",
            name="metric_value",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="monitoring.metricvalue"
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="rule",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="alerts",
                to="monitoring.alertrule",
            ),
        ),
        migrations.AddIndex(
            model_name="metricvalue",
            index=models.Index(
                fields=["metric", "timestamp"], name="monitoring__metric__643087_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="metricvalue",
            index=models.Index(
                fields=["timestamp"], name="monitoring__timesta_615ebd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="metricvalue",
            index=models.Index(
                fields=["user", "timestamp"], name="monitoring__user_id_ef7450_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="metricvalue",
            unique_together={("metric", "timestamp", "labels")},
        ),
        migrations.AddIndex(
            model_name="logentry",
            index=models.Index(
                fields=["level", "created_at"], name="monitoring__level_1593cc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logentry",
            index=models.Index(
                fields=["source", "created_at"], name="monitoring__source_0889b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logentry",
            index=models.Index(
                fields=["user", "created_at"], name="monitoring__user_id_ff12b9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logentry",
            index=models.Index(
                fields=["app_name", "created_at"], name="monitoring__app_nam_5a2baa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logentry",
            index=models.Index(
                fields=["created_at"], name="monitoring__created_3e58cc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["status", "created_at"], name="monitoring__status_8a6e4c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["severity", "created_at"], name="monitoring__severit_a72ad5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["rule", "created_at"], name="monitoring__rule_id_8d1fc8_idx"
            ),
        ),
    ]
