#!/usr/bin/env python
"""
Test direct des fonctionnalit√©s de s√©curit√©
"""
import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from datetime import datetime
from apps.security.models import LoginAttempt, SecurityEvent, IPBlock, UserSecurity, SecurityRule
from apps.authentication.models import User

def test_security_models():
    """Test direct des mod√®les de s√©curit√©"""
    print("üõ°Ô∏è Test Direct des Mod√®les de S√©curit√©")
    print("=" * 50)
    
    try:
        # 1. R√©cup√©rer un utilisateur existant
        print("1Ô∏è‚É£ R√©cup√©ration d'un utilisateur existant...")
        try:
            user = User.objects.first()
            if not user:
                print("   ‚ùå Aucun utilisateur trouv√©. Cr√©ez d'abord un utilisateur.")
                return
            print(f"   ‚úÖ Utilisateur trouv√©: {user.email}")
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
            return
        
        # 2. Test du profil de s√©curit√©
        print("\n2Ô∏è‚É£ Test du profil de s√©curit√©...")
        try:
            security_profile = UserSecurity.get_or_create_for_user(user)
            print(f"   ‚úÖ Profil de s√©curit√©: {security_profile}")
            print(f"   üìä Score de s√©curit√©: {security_profile.get_security_score()}")
            print(f"   üîí Statut: {security_profile.get_status_display()}")
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
        
        # 3. Test des tentatives de connexion
        print("\n3Ô∏è‚É£ Test des tentatives de connexion...")
        try:
            # Enregistrer une tentative √©chou√©e
            failed_attempt = LoginAttempt.record_attempt(
                email=user.email,
                ip_address="192.168.1.100",
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                status=LoginAttempt.FAILED,
                user=user,
                failure_reason="Mot de passe incorrect"
            )
            print(f"   ‚úÖ Tentative √©chou√©e enregistr√©e: {failed_attempt}")
            
            # Enregistrer une tentative r√©ussie
            success_attempt = LoginAttempt.record_attempt(
                email=user.email,
                ip_address="192.168.1.100",
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                status=LoginAttempt.SUCCESS,
                user=user
            )
            print(f"   ‚úÖ Tentative r√©ussie enregistr√©e: {success_attempt}")
            
            # V√©rifier les compteurs
            failed_count = LoginAttempt.get_failed_attempts_count("192.168.1.100", user.email, minutes=15)
            print(f"   üìä Tentatives √©chou√©es r√©centes: {failed_count}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
        
        # 4. Test des √©v√©nements de s√©curit√©
        print("\n4Ô∏è‚É£ Test des √©v√©nements de s√©curit√©...")
        try:
            # Cr√©er un √©v√©nement de s√©curit√©
            security_event = SecurityEvent.create_event(
                event_type=SecurityEvent.SUSPICIOUS_ACTIVITY,
                title="Test d'√©v√©nement de s√©curit√©",
                description="Ceci est un test d'√©v√©nement de s√©curit√©",
                ip_address="192.168.1.100",
                user=user,
                severity=SecurityEvent.MEDIUM,
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                country="FR",
                city="Paris",
                metadata={"test": True, "source": "direct_test"}
            )
            print(f"   ‚úÖ √âv√©nement cr√©√©: {security_event}")
            print(f"   üìä Type: {security_event.get_event_type_display()}")
            print(f"   ‚ö†Ô∏è Gravit√©: {security_event.get_severity_display()}")
            
            # Ajouter une action
            security_event.add_action("test_action", "Action de test ajout√©e")
            print(f"   ‚úÖ Action ajout√©e √† l'√©v√©nement")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
        
        # 5. Test du blocage IP
        print("\n5Ô∏è‚É£ Test du blocage IP...")
        try:
            test_ip = "192.168.1.200"
            
            # Bloquer une IP
            ip_block = IPBlock.block_ip(
                ip_address=test_ip,
                reason="Test de blocage IP",
                block_type=IPBlock.MANUAL,
                duration_minutes=5
            )
            print(f"   ‚úÖ IP bloqu√©e: {ip_block}")
            print(f"   üìä Statut: {ip_block.get_status_display()}")
            print(f"   ‚è∞ Expire dans: {ip_block.get_remaining_time()} minutes")
            
            # V√©rifier le blocage
            is_blocked = IPBlock.is_ip_blocked(test_ip)
            print(f"   üîí IP bloqu√©e: {is_blocked}")
            
            # D√©bloquer l'IP
            unblocked_count = IPBlock.unblock_ip(test_ip)
            print(f"   üîì IP d√©bloqu√©e: {unblocked_count} blocage(s) supprim√©(s)")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
        
        # 6. Test des r√®gles de s√©curit√©
        print("\n6Ô∏è‚É£ Test des r√®gles de s√©curit√©...")
        try:
            # Cr√©er une r√®gle de s√©curit√©
            security_rule = SecurityRule.objects.create(
                name="Test Rule",
                description="R√®gle de test pour la s√©curit√©",
                rule_type=SecurityRule.RATE_LIMIT,
                conditions={"requests_per_minute": 10},
                actions=[{
                    "type": "send_alert",
                    "params": {
                        "title": "Rate limit d√©pass√©",
                        "description": "Trop de requ√™tes d√©tect√©es",
                        "severity": "medium"
                    }
                }],
                priority=1,
                status=SecurityRule.ACTIVE
            )
            print(f"   ‚úÖ R√®gle cr√©√©e: {security_rule}")
            
            # Tester la r√®gle
            context = {"requests_per_minute": 15}
            if security_rule.is_condition_met(context):
                print("   ‚úÖ Condition de la r√®gle remplie")
                results = security_rule.execute_actions(context)
                print(f"   üìä Actions ex√©cut√©es: {len(results)}")
            else:
                print("   ‚ùå Condition de la r√®gle non remplie")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
        
        # 7. Statistiques finales
        print("\n7Ô∏è‚É£ Statistiques finales...")
        try:
            total_attempts = LoginAttempt.objects.count()
            failed_attempts = LoginAttempt.objects.filter(status='failed').count()
            successful_attempts = LoginAttempt.objects.filter(status='success').count()
            blocked_ips = IPBlock.objects.filter(status='active').count()
            security_events_count = SecurityEvent.objects.count()
            security_rules_count = SecurityRule.objects.count()
            
            print(f"   üìä Total des tentatives de connexion: {total_attempts}")
            print(f"   ‚ùå Tentatives √©chou√©es: {failed_attempts}")
            print(f"   ‚úÖ Tentatives r√©ussies: {successful_attempts}")
            print(f"   üö´ IPs bloqu√©es: {blocked_ips}")
            print(f"   üõ°Ô∏è √âv√©nements de s√©curit√©: {security_events_count}")
            print(f"   üìã R√®gles de s√©curit√©: {security_rules_count}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
        
        print("\n‚úÖ Test des mod√®les de s√©curit√© termin√©!")
        print("üõ°Ô∏è Toutes les fonctionnalit√©s de s√©curit√© fonctionnent correctement")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_security_models()

