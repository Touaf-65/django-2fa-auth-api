#!/usr/bin/env python3
"""
Script de test pour les rapports automatiques et alertes syst√®me
"""
import requests
import json
import sys

# Configuration
BASE_URL = "http://localhost:8000"
ADMIN_EMAIL = "admin@example.com"
ADMIN_PASSWORD = "admin123"

def test_reports_alerts():
    """Test des rapports automatiques et alertes syst√®me"""
    print("üöÄ Test des Rapports Automatiques et Alertes Syst√®me")
    print("=" * 60)
    
    # 1. Connexion admin
    print("\n1. Connexion admin...")
    login_data = {
        "email": ADMIN_EMAIL,
        "password": ADMIN_PASSWORD
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/auth/signin/", json=login_data)
        if response.status_code == 200:
            data = response.json()
            access_token = data.get('access')
            print(f"‚úÖ Connexion r√©ussie: {data.get('user', {}).get('email')}")
        else:
            print(f"‚ùå Erreur de connexion: {response.status_code}")
            print(response.text)
            return
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur. Assurez-vous que le serveur Django est d√©marr√©.")
        return
    
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    # 2. Test des m√©triques syst√®me
    print("\n2. Test des m√©triques syst√®me...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/monitoring/metrics/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ M√©triques syst√®me r√©cup√©r√©es")
            metrics = response.json()
            print(f"   - Score de sant√©: {metrics.get('health_score')}")
            print(f"   - CPU: {metrics.get('system_info', {}).get('cpu_percent')}%")
            print(f"   - M√©moire: {metrics.get('system_info', {}).get('memory_percent')}%")
            print(f"   - Disque: {metrics.get('system_info', {}).get('disk_percent')}%")
        else:
            print(f"‚ùå Erreur m√©triques: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur m√©triques: {e}")
    
    # 3. Test de la sant√© du syst√®me
    print("\n3. Test de la sant√© du syst√®me...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/monitoring/health/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Sant√© du syst√®me v√©rifi√©e")
            health = response.json()
            print(f"   - Score: {health.get('health_score')}")
            print(f"   - Statut: {health.get('status')}")
        else:
            print(f"‚ùå Erreur sant√©: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur sant√©: {e}")
    
    # 4. Test des templates de rapport
    print("\n4. Test des templates de rapport...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/reports/templates/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Templates de rapport r√©cup√©r√©s")
            templates = response.json()
            print(f"   - Nombre de templates: {len(templates.get('results', []))}")
        else:
            print(f"‚ùå Erreur templates: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur templates: {e}")
    
    # 5. Test des rapports programm√©s
    print("\n5. Test des rapports programm√©s...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/reports/scheduled/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Rapports programm√©s r√©cup√©r√©s")
            reports = response.json()
            print(f"   - Nombre de rapports: {len(reports.get('results', []))}")
        else:
            print(f"‚ùå Erreur rapports: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur rapports: {e}")
    
    # 6. Test des ex√©cutions de rapport
    print("\n6. Test des ex√©cutions de rapport...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/reports/executions/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Ex√©cutions de rapport r√©cup√©r√©es")
            executions = response.json()
            print(f"   - Nombre d'ex√©cutions: {len(executions.get('results', []))}")
        else:
            print(f"‚ùå Erreur ex√©cutions: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur ex√©cutions: {e}")
    
    # 7. Test des statistiques de rapport
    print("\n7. Test des statistiques de rapport...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/reports/statistics/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Statistiques de rapport r√©cup√©r√©es")
            stats = response.json()
            print(f"   - Templates actifs: {stats.get('total_templates')}")
            print(f"   - Rapports programm√©s: {stats.get('total_scheduled_reports')}")
            print(f"   - Ex√©cutions r√©ussies: {stats.get('successful_executions')}")
        else:
            print(f"‚ùå Erreur stats rapports: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur stats rapports: {e}")
    
    # 8. Test des r√®gles d'alerte
    print("\n8. Test des r√®gles d'alerte...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/alerts/rules/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ R√®gles d'alerte r√©cup√©r√©es")
            rules = response.json()
            print(f"   - Nombre de r√®gles: {len(rules.get('results', []))}")
        else:
            print(f"‚ùå Erreur r√®gles: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur r√®gles: {e}")
    
    # 9. Test des alertes syst√®me
    print("\n9. Test des alertes syst√®me...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/alerts/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Alertes syst√®me r√©cup√©r√©es")
            alerts = response.json()
            print(f"   - Nombre d'alertes: {len(alerts.get('results', []))}")
        else:
            print(f"‚ùå Erreur alertes: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur alertes: {e}")
    
    # 10. Test des notifications d'alerte
    print("\n10. Test des notifications d'alerte...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/alerts/notifications/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Notifications d'alerte r√©cup√©r√©es")
            notifications = response.json()
            print(f"   - Nombre de notifications: {len(notifications.get('results', []))}")
        else:
            print(f"‚ùå Erreur notifications: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur notifications: {e}")
    
    # 11. Test des statistiques d'alerte
    print("\n11. Test des statistiques d'alerte...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/alerts/statistics/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Statistiques d'alerte r√©cup√©r√©es")
            stats = response.json()
            print(f"   - Total alertes: {stats.get('total_alerts')}")
            print(f"   - Alertes actives: {stats.get('active_alerts')}")
            print(f"   - Alertes r√©solues: {stats.get('resolved_alerts')}")
        else:
            print(f"‚ùå Erreur stats alertes: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur stats alertes: {e}")
    
    # 12. Test de v√©rification des alertes
    print("\n12. Test de v√©rification des alertes...")
    try:
        response = requests.post(f"{BASE_URL}/api/admin/alerts/check/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ V√©rification des alertes termin√©e")
            result = response.json()
            print(f"   - Message: {result.get('message')}")
        else:
            print(f"‚ùå Erreur v√©rification: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ Test des Rapports et Alertes termin√© !")

if __name__ == "__main__":
    test_reports_alerts()

